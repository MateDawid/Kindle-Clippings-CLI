---
name: Main

on: [ push ]

jobs:
  quality_and_tests:
    name: Code quality and tests
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: "Install dependencies"
        run: |
          python3 -m venv venv
          source ./venv/bin/activate
          python3 -m pip install --upgrade pip
          python3 -m pip install -U pip setuptools
          python3 -m pip install poetry
          poetry install

      - name: "[Code quality] black"
        run: |
          source venv/bin/activate
          black . --line-length=120 --check
      - name: "[Code quality] isort"
        run: |
          source venv/bin/activate
          isort . --check-only --profile black --line-length 120
      - name: "[Code quality] flake8"
        run: |
          source venv/bin/activate
          flake8 . --max-line-length 120 --exclude venv
      - name: "[Code quality] bandit"
        run: |
          source venv/bin/activate
          bandit -c pyproject.toml -r .
      - name: "[Code quality] safety"
        run: |
          source venv/bin/activate
          safety scan
      - name: "[Tests] pytest"
        run: |
          source venv/bin/activate
          pytest

  pyinstaller-windows:
    name: Build Windows binary
    needs: quality_and_tests
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          python -m pip install --upgrade pip
          python -m pip install -U pip setuptools
          python -m pip install poetry
          poetry install
          pyinstaller clippings_cli.spec --noconfirm
        shell: pwsh

      - name: Test clippings command
        run: |
          .\dist\clippings.exe --help
        shell: pwsh

      - name: Publish Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Clippings-Windows
          path: dist\clippings.exe

  pyinstaller-macos:
    name: Build macOS binary
    needs: quality_and_tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -U pip setuptools
          python -m pip install poetry
          poetry install
          pyinstaller clippings_cli.spec --noconfirm

      - name: Test clippings command
        run: |
          ./dist/clippings --help

      - name: Publish Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Clippings-macOS
          path: dist/clippings

  release:
    # if: github.ref == 'refs/heads/master
    name: Create Release and Publish
    needs: [pyinstaller-windows, pyinstaller-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create release tag
        id: create_tag
        run: |
          git fetch --tags
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ env.VERSION }} already exists"
            exit 1
          fi
          git tag "v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build package
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}